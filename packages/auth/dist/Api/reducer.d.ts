import { ActivateAccountPayload, ActivateState, AuthState, ForgotPasswordState, LoginPayload, LoginState, LogoutPayload, PreLoginPayload, User, VerifyMFAPayload } from './interfaces';
export declare const storeName = "auth";
export declare const preloadedState: AuthState;
declare const reducer: import("redux").Reducer<AuthState, import("redux").AnyAction>;
declare const actions: {
    requestAuthorize: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[payload: boolean], boolean, string, never, never>;
    preLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[payload: PreLoginPayload], PreLoginPayload, string, never, never>;
    login: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[payload: LoginPayload], LoginPayload, string, never, never>;
    verifyMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[payload: VerifyMFAPayload], VerifyMFAPayload, string, never, never>;
    activateAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[payload: ActivateAccountPayload], ActivateAccountPayload, string, never, never>;
    forgotPassword: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[payload: PreLoginPayload], PreLoginPayload, string, never, never>;
    resetPassword: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[payload: ActivateAccountPayload], ActivateAccountPayload, string, never, never>;
    logout: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[payload: LogoutPayload], LogoutPayload, string, never, never>;
    setState: import("@reduxjs/toolkit").ActionCreatorWithPayload<Partial<AuthState>, string>;
    setIsLoading: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, string>;
    setError: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, string>;
    setIsSSOAuth: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, string>;
    setIsAuthenticated: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, string>;
    setUser: import("@reduxjs/toolkit").ActionCreatorWithPayload<User, string>;
    setLoginState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[payload: Partial<LoginState>], Partial<LoginState>, string, never, never>;
    resetLoginState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setActivateState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[payload: Partial<ActivateState>], Partial<ActivateState>, string, never, never>;
    resetActivateState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setForgotPasswordState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[payload: Partial<ForgotPasswordState>], Partial<ForgotPasswordState>, string, never, never>;
    resetForgotPasswordState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
};
export declare type AuthActions = typeof actions;
export { reducer, actions };
